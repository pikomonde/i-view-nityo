// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository_interface.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pikomonde/i-view-nityo/model"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(user model.User) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), user)
}

// GetUserByID mocks base method.
func (m *MockUser) GetUserByID(id int64) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUser)(nil).GetUserByID), id)
}

// GetUserByUsername mocks base method.
func (m *MockUser) GetUserByUsername(username string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUser)(nil).GetUserByUsername), username)
}

// MockInvitation is a mock of Invitation interface.
type MockInvitation struct {
	ctrl     *gomock.Controller
	recorder *MockInvitationMockRecorder
}

// MockInvitationMockRecorder is the mock recorder for MockInvitation.
type MockInvitationMockRecorder struct {
	mock *MockInvitation
}

// NewMockInvitation creates a new mock instance.
func NewMockInvitation(ctrl *gomock.Controller) *MockInvitation {
	mock := &MockInvitation{ctrl: ctrl}
	mock.recorder = &MockInvitationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvitation) EXPECT() *MockInvitationMockRecorder {
	return m.recorder
}

// CreateInvitation mocks base method.
func (m *MockInvitation) CreateInvitation(invitation model.Invitation) (model.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitation", invitation)
	ret0, _ := ret[0].(model.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvitation indicates an expected call of CreateInvitation.
func (mr *MockInvitationMockRecorder) CreateInvitation(invitation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitation", reflect.TypeOf((*MockInvitation)(nil).CreateInvitation), invitation)
}

// GetInvitationByToken mocks base method.
func (m *MockInvitation) GetInvitationByToken(invitationToken string) (model.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvitationByToken", invitationToken)
	ret0, _ := ret[0].(model.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitationByToken indicates an expected call of GetInvitationByToken.
func (mr *MockInvitationMockRecorder) GetInvitationByToken(invitationToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitationByToken", reflect.TypeOf((*MockInvitation)(nil).GetInvitationByToken), invitationToken)
}

// GetInvitations mocks base method.
func (m *MockInvitation) GetInvitations() ([]model.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvitations")
	ret0, _ := ret[0].([]model.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitations indicates an expected call of GetInvitations.
func (mr *MockInvitationMockRecorder) GetInvitations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitations", reflect.TypeOf((*MockInvitation)(nil).GetInvitations))
}

// IsInvitationExist mocks base method.
func (m *MockInvitation) IsInvitationExist(invitationToken string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInvitationExist", invitationToken)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInvitationExist indicates an expected call of IsInvitationExist.
func (mr *MockInvitationMockRecorder) IsInvitationExist(invitationToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInvitationExist", reflect.TypeOf((*MockInvitation)(nil).IsInvitationExist), invitationToken)
}

// UpdateInvitationStatus mocks base method.
func (m *MockInvitation) UpdateInvitationStatus(invitationToken string, updatedStatus model.InvitationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvitationStatus", invitationToken, updatedStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInvitationStatus indicates an expected call of UpdateInvitationStatus.
func (mr *MockInvitationMockRecorder) UpdateInvitationStatus(invitationToken, updatedStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvitationStatus", reflect.TypeOf((*MockInvitation)(nil).UpdateInvitationStatus), invitationToken, updatedStatus)
}
